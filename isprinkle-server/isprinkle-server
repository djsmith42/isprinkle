#!/usr/bin/env python

import os, sys, time, signal, datetime, uuid

from webservice      import iSprinkleWebService
from wateringservice import iSprinkleWateringService
from persister       import iSprinklePersister

shutdown_requested = False

THREAD_TIMEOUT_SECONDS = 5.0

def handle_sigterm(signal, func=None):
    print 'Received SIGTERM'
    global shutdown_requested
    shutdown_requested = True

if __name__ == '__main__':
    signal.signal(signal.SIGTERM, handle_sigterm)

    model = iSprinklePersister().load()
    print 'Loaded %d saved watering%s:' % (
            len(model.get_waterings()),
            '' if len(model.get_waterings()) == 1 else 's')
    for watering in model.get_waterings():
        print watering

    try:
        wateringservice = iSprinkleWateringService(model)
        wateringservice.start()

        webservice = iSprinkleWebService(model)
        webservice.start()

    except IOError as (errno, strerror):
        print 'Could not startup: %s, code %d.' % (strerror, errno)
        sys.exit()
    except:
        print 'Could not startup: unknown error'
        raise

    try:
        while not shutdown_requested:
            time.sleep(0.5)
    except KeyboardInterrupt:
        pass

    webservice.stop()
    wateringservice.stop()

    webservice.join(THREAD_TIMEOUT_SECONDS)
    wateringservice.join(THREAD_TIMEOUT_SECONDS)
